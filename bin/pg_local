#!/usr/bin/env bash
set -e

pg_local_dir=${PGLOCAL-".postgresql"}

red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
cyan="\033[0;36m"
white="\033[0;37m"

__direnv_reload() {
  direnv reload 2> /dev/null
}

__direnv_setup() {
  if [ -z "`grep -s pg_local .envrc`" ]; then
    echo "source pg_local env" >> .envrc
    echo -e "direnv: ${cyan}added pg_local${white}"
    direnv allow
  fi
}

__init() {
  if ! __initialized; then
    echo -en "PostgreSQL: ${white}"
    mkdir -p "$pg_local_dir"
    pg_ctl initdb -D $pg_local_dir -s -o "-A trust"
    echo -e "${green}initialized${white}"
  fi
}

__initialized() {
  [[ -d "$pg_local_dir" ]]
}

__install() {
  local version=${1}

  if [ -n "`command -v asdf_local`" ]; then
    asdf_local setup postgres ${version}
  else
    echo -e "asdf_local: ${red}missing${white}"
  fi
}

__env() {
  __verify_initialized
  __is_running && __status || __start

  if __is_running; then
    export PGDATA=`pwd`/${pg_local_dir}
    export PGPORT=`__port`
  fi
}

__is_running() {
  [[ -n "`pg_ctl status -D $pg_local_dir 2> /dev/null | grep PID`" ]]
}

__port() {
  pg_ctl status -D $pg_local_dir | tail -n 1 | cut -d " " -f 5 | sed 's/"//g'
}

__verify_initialized() {
  if ! __initialized; then
    echo -e "PostgreSQL: ${yellow}uninitialized${white}"
    return 1
  fi
}

__start() {
  __verify_initialized

  if ! __is_running; then
    local log="$pg_local_dir/postgresql.log"
    local port=$(ruby -r socket -e 'puts TCPServer.open(0).addr[1]')
    pg_ctl start -D "$pg_local_dir" -l "$log" -s -o "-p $port"
    echo -e "PostgreSQL: ${green}started${white}"
  fi
}

__status() {
  __verify_initialized

  if __is_running; then
    echo -e "PostgreSQL: ${green}running${white}"
  else
    echo -e "PostgreSQL: ${red}not running${white}"
  fi
}

__stop() {
  __verify_initialized

  if __is_running; then
    pg_ctl stop -D "$pg_local_dir" -s
    echo -e "PostgreSQL: ${red}stopped${white}"
  fi
}

action=${1}

case ${action} in
  init)
    if ! __initialized; then
      __init
    else
      echo -e "PostgreSQL: ${green}initialized${white}"
    fi
    ;;
  setup)
    version=${2}
    __install ${version}
    __init
    __start
    __direnv_setup
    ;;
  stop)
    __stop
    __direnv_reload
    ;;
  start)
    __start
    __direnv_reload
    ;;
  restart)
    __stop
    __start
    __direnv_reload
    ;;
  status)
    __status
    ;;
  env)
    __env
    ;;
  *)
    echo "Usage: $(basename $0) <init|setup|stop|start|restart|status|env>"
esac
